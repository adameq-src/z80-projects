                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Sat Mar 28 22:16:58 2015
                              5 ;--------------------------------------------------------
                              6 	.module test
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _SIO_SendString
                             14 	.globl _SIO_SendChar
                             15 	.globl _SIO_Init
                             16 	.globl _LCD_ClearScreen
                             17 	.globl _LCD_DispString
                             18 	.globl _LCD_Init
                             19 	.globl _LCD_ShowBin
                             20 	.globl _charToHexStr
                             21 	.globl _delay_ms
                             22 ;--------------------------------------------------------
                             23 ; special function registers
                             24 ;--------------------------------------------------------
                     0000    25 _PA	=	0x0000
                     0001    26 _PA_CONTROL	=	0x0001
                     0002    27 _PB	=	0x0002
                     0003    28 _PB_CONTROL	=	0x0003
                     0040    29 _SIO_A_DATA	=	0x0040
                     0041    30 _SIO_A_CMD	=	0x0041
                     0042    31 _SIO_B_DATA	=	0x0042
                     0043    32 _SIO_B_CMD	=	0x0043
                             33 ;--------------------------------------------------------
                             34 ; ram data
                             35 ;--------------------------------------------------------
                             36 	.area _DATA
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _INITIALIZED
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DABS (ABS)
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _GSINIT
                             50 	.area _GSFINAL
                             51 	.area _GSINIT
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _HOME
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area _CODE
                             61 ;src\test.c:9: int main(void)
                             62 ;	---------------------------------
                             63 ; Function main
                             64 ; ---------------------------------
   0000                      65 _main_start::
   0000                      66 _main:
   0000 F5            [11]   67 	push	af
                             68 ;src\test.c:15: LCD_Init();
   0001 CDr00r00      [17]   69 	call	_LCD_Init
                             70 ;src\test.c:16: SIO_Init();
   0004 CDr00r00      [17]   71 	call	_SIO_Init
                             72 ;src\test.c:19: PA_CONTROL = 0x0F;
   0007 3E 0F         [ 7]   73 	ld	a,#0x0F
   0009 D3 01         [11]   74 	out	(_PA_CONTROL),a
                             75 ;src\test.c:21: while(1) {
   000B                      76 00104$:
                             77 ;src\test.c:22: LCD_ClearScreen();
   000B CDr00r00      [17]   78 	call	_LCD_ClearScreen
                             79 ;src\test.c:23: LCD_DispString("mu he he            ", 20);
   000E 21rA2r00      [10]   80 	ld	hl,#___str_0
   0011 01 14 00      [10]   81 	ld	bc,#0x0014
   0014 C5            [11]   82 	push	bc
   0015 E5            [11]   83 	push	hl
   0016 CDr00r00      [17]   84 	call	_LCD_DispString
   0019 F1            [10]   85 	pop	af
   001A F1            [10]   86 	pop	af
                             87 ;src\test.c:25: SIO_SendString("Z80 Alive...\r\n", 14);
   001B 21rB7r00      [10]   88 	ld	hl,#___str_1
   001E 01 0E 00      [10]   89 	ld	bc,#0x000E
   0021 C5            [11]   90 	push	bc
   0022 E5            [11]   91 	push	hl
   0023 CDr00r00      [17]   92 	call	_SIO_SendString
   0026 F1            [10]   93 	pop	af
   0027 F1            [10]   94 	pop	af
                             95 ;src\test.c:26: x = SIO_A_CMD;
   0028 DB 41         [11]   96 	in	a,(_SIO_A_CMD)
   002A 67            [ 4]   97 	ld	h,a
                             98 ;src\test.c:27: LCD_ShowBin(x);		
   002B E5            [11]   99 	push	hl
   002C E5            [11]  100 	push	hl
   002D 33            [ 6]  101 	inc	sp
   002E CDr00r00      [17]  102 	call	_LCD_ShowBin
   0031 33            [ 6]  103 	inc	sp
   0032 E1            [10]  104 	pop	hl
                            105 ;src\test.c:29: if((x & 0x01) == 1) {
   0033 7C            [ 4]  106 	ld	a,h
   0034 E6 01         [ 7]  107 	and	a, #0x01
   0036 3D            [ 4]  108 	dec	a
   0037 20 4C         [12]  109 	jr	NZ,00102$
                            110 ;src\test.c:31: SIO_SendString("Received character: ", 20);	
   0039 21rC6r00      [10]  111 	ld	hl,#___str_2
   003C 01 14 00      [10]  112 	ld	bc,#0x0014
   003F C5            [11]  113 	push	bc
   0040 E5            [11]  114 	push	hl
   0041 CDr00r00      [17]  115 	call	_SIO_SendString
   0044 F1            [10]  116 	pop	af
   0045 F1            [10]  117 	pop	af
                            118 ;src\test.c:32: SIO_SendChar(SIO_A_DATA);
   0046 DB 40         [11]  119 	in	a,(_SIO_A_DATA)
   0048 DB 40         [11]  120 	in	a,(_SIO_A_DATA)
   004A F5            [11]  121 	push	af
   004B 33            [ 6]  122 	inc	sp
   004C CDr00r00      [17]  123 	call	_SIO_SendChar
   004F 33            [ 6]  124 	inc	sp
                            125 ;src\test.c:34: SIO_SendChar(' ');
   0050 3E 20         [ 7]  126 	ld	a,#0x20
   0052 F5            [11]  127 	push	af
   0053 33            [ 6]  128 	inc	sp
   0054 CDr00r00      [17]  129 	call	_SIO_SendChar
   0057 33            [ 6]  130 	inc	sp
                            131 ;src\test.c:35: charToHexStr(SIO_A_DATA, buf);
   0058 21 00 00      [10]  132 	ld	hl,#0x0000
   005B 39            [11]  133 	add	hl,sp
   005C 5D            [ 4]  134 	ld	e,l
   005D 54            [ 4]  135 	ld	d,h
   005E D5            [11]  136 	push	de
   005F E5            [11]  137 	push	hl
   0060 DB 40         [11]  138 	in	a,(_SIO_A_DATA)
   0062 DB 40         [11]  139 	in	a,(_SIO_A_DATA)
   0064 F5            [11]  140 	push	af
   0065 33            [ 6]  141 	inc	sp
   0066 CDr00r00      [17]  142 	call	_charToHexStr
   0069 F1            [10]  143 	pop	af
   006A 33            [ 6]  144 	inc	sp
   006B D1            [10]  145 	pop	de
                            146 ;src\test.c:36: SIO_SendString(buf, 2);
   006C 21 02 00      [10]  147 	ld	hl,#0x0002
   006F E5            [11]  148 	push	hl
   0070 D5            [11]  149 	push	de
   0071 CDr00r00      [17]  150 	call	_SIO_SendString
   0074 F1            [10]  151 	pop	af
                            152 ;src\test.c:38: SIO_SendChar('\r');
   0075 26 0D         [ 7]  153 	ld	h,#0x0D
   0077 E3            [19]  154 	ex	(sp),hl
   0078 33            [ 6]  155 	inc	sp
   0079 CDr00r00      [17]  156 	call	_SIO_SendChar
   007C 33            [ 6]  157 	inc	sp
                            158 ;src\test.c:39: SIO_SendChar('\n');
   007D 3E 0A         [ 7]  159 	ld	a,#0x0A
   007F F5            [11]  160 	push	af
   0080 33            [ 6]  161 	inc	sp
   0081 CDr00r00      [17]  162 	call	_SIO_SendChar
   0084 33            [ 6]  163 	inc	sp
   0085                     164 00102$:
                            165 ;src\test.c:43: PA = 0x55;
   0085 3E 55         [ 7]  166 	ld	a,#0x55
   0087 D3 00         [11]  167 	out	(_PA),a
                            168 ;src\test.c:44: delay_ms(500);
   0089 21 F4 01      [10]  169 	ld	hl,#0x01F4
   008C E5            [11]  170 	push	hl
   008D CDr00r00      [17]  171 	call	_delay_ms
   0090 F1            [10]  172 	pop	af
                            173 ;src\test.c:45: PA = 0xAA;
   0091 3E AA         [ 7]  174 	ld	a,#0xAA
   0093 D3 00         [11]  175 	out	(_PA),a
                            176 ;src\test.c:46: delay_ms(500);
   0095 21 F4 01      [10]  177 	ld	hl,#0x01F4
   0098 E5            [11]  178 	push	hl
   0099 CDr00r00      [17]  179 	call	_delay_ms
   009C F1            [10]  180 	pop	af
   009D C3r0Br00      [10]  181 	jp	00104$
   00A0 F1            [10]  182 	pop	af
   00A1 C9            [10]  183 	ret
   00A2                     184 _main_end::
   00A2                     185 ___str_0:
   00A2 6D 75 20 68 65 20   186 	.ascii "mu he he            "
        68 65 20 20 20 20
        20 20 20 20 20 20
        20 20
   00B6 00                  187 	.db 0x00
   00B7                     188 ___str_1:
   00B7 5A 38 30 20 41 6C   189 	.ascii "Z80 Alive..."
        69 76 65 2E 2E 2E
   00C3 0D                  190 	.db 0x0D
   00C4 0A                  191 	.db 0x0A
   00C5 00                  192 	.db 0x00
   00C6                     193 ___str_2:
   00C6 52 65 63 65 69 76   194 	.ascii "Received character: "
        65 64 20 63 68 61
        72 61 63 74 65 72
        3A 20
   00DA 00                  195 	.db 0x00
                            196 	.area _CODE
                            197 	.area _INITIALIZER
                            198 	.area _CABS (ABS)
